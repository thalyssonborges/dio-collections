#Stream

[x] classe anônima
[x] functional interface
Qualquer interface com um SAM (Single Abstract Method) é uma interface funcional e sua implementação pode ser tratada como expressões lambda.
https://www.baeldung.com/java-8-functional-interfaces
[x] Comparator
[x] lambda '->'
É uma função anônima com a qual podemos lidar como um cidadão de língua de primeira classe. Por exemplo, podemos passá-lo ou retorná-lo de um método.
https://www.baeldung.com/java-8-lambda-expressions-tips
[] reference method '::'
É um tipo especial de expressões lambda. Eles costumam ser usado para criar expressões lambda simples fazendo referência a métodos existentes.
https://www.baeldung.com/java-method-references


[x] stream - Fluxo de dados que não altera a coleção
https://www.oracle.com/br/technical-resources/articles/java-stream-api.html
https://medium.com/@racc.costa/streams-no-java-8-e-no-java-9-36177c5c3313
https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/
[x] operações intermediárias - Permite operações encadeadas
[x] operações finais - Fecha o fluxo
https://www.geeksforgeeks.org/stream-in-java/
---
[x] forEach(new Consumer())
[x] skip()
[x] collect(Collectors.joining())
[x] distinct()
[x] count()
[x] limit()
[x] collect(Collectors.toSet())
[x] map(new Function())
[x] collect(Collectors.toList())
[x] filter (new Function())
[x] sorted()
[x] mapToInt
[x] sum()
[x] average()
[x] ifPresent()
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Optional.html
https://www.baeldung.com/java-optional
[x] min
[x] max
*[x] removeIf(new Predicate())
[x] collect(Collectors.groupingBy(new Function())